package org.example;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Analyzes HTTP responses to detect security vulnerabilities.
 */
public class VulnerabilityDetector {

    /**
     * Scans the HTTP headers for common security vulnerabilities.
     *
     * @param headers The HTTP response headers.
     * @return A list of detected vulnerabilities.
     */
    public static List<String> scanHeaders(Map<String, List<String>> headers) {
        List<String> vulnerabilities = new ArrayList<>();

        if (!headers.containsKey("Content-Security-Policy")) {
            vulnerabilities.add("❌ Missing Content-Security-Policy (CSP) header. This allows XSS attacks.");
        }
        if (!headers.containsKey("X-Frame-Options")) {
            vulnerabilities.add("❌ Missing X-Frame-Options header. Clickjacking attack possible.");
        }
        if (!headers.containsKey("X-XSS-Protection")) {
            vulnerabilities.add("❌ Missing X-XSS-Protection header. No built-in browser XSS protection.");
        }
        if (!headers.containsKey("Strict-Transport-Security")) {
            vulnerabilities
                    .add("❌ Missing Strict-Transport-Security (HSTS) header. Man-in-the-middle attacks possible.");
        }

        return vulnerabilities;
    }

    /**
     * Scans for basic SQL Injection patterns in a response body.
     *
     * @param responseBody The HTTP response body.
     * @return A list of detected SQLi vulnerabilities.
     */
    public static List<String> scanSQLInjection(String responseBody) {
        List<String> vulnerabilities = new ArrayList<>();
        String[] sqlPatterns = { "SQL syntax", "mysql_fetch", "error in your SQL" };

        for (String pattern : sqlPatterns) {
            if (responseBody.toLowerCase().contains(pattern.toLowerCase())) {
                vulnerabilities.add("❌ Possible SQL Injection detected: " + pattern);
            }
        }
        return vulnerabilities;
    }

    /**
     * Scans for basic XSS patterns in a response body.
     *
     * @param responseBody The HTTP response body.
     * @return A list of detected XSS vulnerabilities.
     */
    public static List<String> scanXSS(String responseBody) {
        List<String> vulnerabilities = new ArrayList<>();
        if (responseBody.contains("<script>") || responseBody.contains("onerror=")) {
            vulnerabilities.add("❌ Possible XSS vulnerability detected.");
        }
        return vulnerabilities;
    }
}
